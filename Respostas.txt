questão 1 - 
Try-Catch:
O bloco try-catch é amplamente usado para capturar e tratar exceções em um trecho de código.
 Qualquer exceção lançada dentro do bloco try é capturada pelo bloco catch.

Exemplo:
try {
  // Código que pode gerar uma exceção
  throw new Error("Isso é uma exceção!");
} catch (error) {
  console.log(`Erro capturado: ${error.message}`);
}

Throw:
A palavra-chave throw é usada para lançar uma exceção manualmente. Isso é útil quando você quer sinalizar condições de erro específicas.

Exemplo:
function dividirNumeros(a: number, b: number): number {
  if (b === 0) {
    throw new Error("Não é possível dividir por zero.");
  }
  return a / b;
}

try {
  console.log(dividirNumeros(10, 0));
} catch (error) {
  console.log(`Erro capturado: ${error.message}`);
}

Finally:
O bloco finally é usado para definir código que será executado, independentemente de ocorrer uma 
exceção ou não. É útil para ações que devem ser realizadas, como a liberação de recursos, 
independentemente do fluxo de exceção.

Exemplo:
try {
  // Código que pode gerar uma exceção
  throw new Error("Isso é uma exceção!");
} catch (error) {
  console.log(`Erro capturado: ${error.message}`);
} finally {
  console.log("Este bloco sempre será executado.");
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 2 - 
Try-Catch:
Limitações:

Pode tornar o código mais complexo e difícil de entender se usado em excesso.
Não é eficiente para lidar com erros assíncronos, como em operações de I/O.
Throw:
Limitações:

É útil para lançar exceções, mas não trata ou gerencia a propagação dessas exceções para fora da 
função atual.
Não é adequado para lidar com operações assíncronas.
Finally:
Limitações:

Não pode manipular ou evitar a propagação de exceções; seu propósito é mais de limpeza ou execução de
 código garantida, independentemente de exceções.
Não substitui completamente blocos try-catch para manipulação avançada de exceções.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 3 - Sacar Após alterações da 
sacar(valor: number): void {
    if (this._saldo < valor) {
      throw new Error("Saldo insuficiente") // questão 3 -> tratamento de exeção, a aplicação foi
    }                                      // interrompida retornando "SALDO INSUFUCIENTE"
      this._saldo -= valor;
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 questão - 4  Alterações na class Conta 
constructor(numero: string, saldoInicial: number) {
    if (saldoInicial < 0) {
      throw new Error("O saldo inicial não pode ser negativo");
    }

    this._numero = numero;
    this._saldo = saldoInicial;
  }

  sacar(valor: number): void {
    if (valor < 0) {
      throw new Error("O valor do saque não pode ser negativo");
    }

    if (this._saldo < valor) {
      throw new Error("Saldo insuficiente");
    }

    this._saldo -= valor;
  }

  depositar(valor: number): void {
    if (valor < 0) {
      throw new Error("O valor do depósito não pode ser negativo");
    }

    this._saldo += valor;
  }

Após essa alterações ao utilizar os metodos acima passando valor <= 0
retorna um erro "Valor inválido"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 5 - Sim, pois os métodos transferir chamam o método sacar, que possui o tratamento de exceções
 propagando assim para os métodos conta.transferir(), banco.transferir() e o método transferir do 
 script app. Porém para uma maior robustez do código deve-se  adicionar tratamento de exceções ao 
 redor da chamada do método transferir no loop principal do script app.ts, permitindo uma manipulação 
 adequada das exceções, exibição de mensagens de erro e possíveis ações corretivas.
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 6 - Após a inserção dos tratamentos de erros para números <0  um Error é lançado 
“VALOR INVÁLIDO”  e a operação é desconsiderada e a aplicação continua sua execução. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 7 - Criar class de erros : 
class AplicacaoError extends Error {
    constructor(message: string) {
      super(message);
      this.name = this.constructor.name;
    }
  }
  
  class ContaInexistenteError extends AplicacaoError {
    constructor(numero: string) {
      super(`Conta ${numero} não encontrada`);
    }
  }
  
  class SaldoInsuficienteError extends AplicacaoError {
    constructor() {
      super("Saldo insuficiente");
    }
  }
  
  export { AplicacaoError, ContaInexistenteError, SaldoInsuficienteError };
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  questão 8- Alterações : 
   public inserir(conta: Conta): void {
    // Verificar se a conta já existe na lista
    if (this.contas.some((c) => c.numero === conta.numero)) {
      console.log(`Conta ${conta.numero} já cadastrada`);
    } else {
      this.contas.push(conta);
      console.log(`Conta ${conta.numero} cadastrada`);
    }
  }
  

  public consultar(numero: string): Conta {
    let contaConsultada!: Conta;
    for (let conta of this.contas) {
      if (conta.numero == numero) {
        contaConsultada = conta;
        break;
      }
    }

    if (!contaConsultada) {
      throw new ContaInexistenteError(numero);
    }

    return contaConsultada;
  }

  private consultarPorIndice(numero: string): number {
    let indice: number = -1;
    for (let i: number = 0; i < this.contas.length; i++) {
      if (this.contas[i].numero == numero) {
        indice = i;
        break;
      }
    }

    if (indice === -1) {
      throw new ContaInexistenteError(numero);
    }

    return indice;
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 9 - Alterações: 
  public alterar(conta: Conta): void {
    let indice: number = this.consultarPorIndice(conta.numero);
    this.contas[indice] = conta;
  }

  public depositar(numero: string, valor: number): void {
    let contaConsultada = this.consultar(numero);
    contaConsultada.depositar(valor);
  }

  public sacar(numero: string, valor: number): void {
    let contaConsultada = this.consultar(numero);
    contaConsultada.sacar(valor);
  }

  public transferir(numeroCredito: string, numeroDebito: string, valor: number): void {
    let contaCredito = this.consultar(numeroCredito);
    let contaDebito = this.consultar(numeroDebito);

    contaDebito.transferir(contaCredito, valor);
  }

  renderJuros(numero: string) {
    let conta: Conta = this.consultar(numero);
    if (conta instanceof Poupanca) {
      conta.renderJuros();
    }
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  questão 10 - Alterações : 
   class ValorInvalidoError extends AplicacaoError {
    constructor() {
      super("Valor inválido para crédito/depósito");
    }
  }
  
    depositar(valor: number): void {
    if (valor <= 0) {
      throw new ValorInvalidoError();
    }

    this._saldo += valor;
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

questão 11 - Alterações : 
 private validarValor(valor: number): void {
    if (valor <= 0) {
      throw new ValorInvalidoError();
    }
  }

  sacar(valor: number): void {
    this.validarValor(valor);

    if (this._saldo < valor) {
      throw new SaldoInsuficienteError();
    }

    this._saldo -= valor;
  }

  depositar(valor: number): void {
    this.validarValor(valor);
    this._saldo += valor;
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 12 - Criar erro PoupancaInvalidaError 
class PoupancaInvalidaError extends AplicacaoError {
    constructor() {
      super("A operação de render juros só pode ser realizada em contas poupança");
    }
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 13 - Alterar metodo inserir para usar o consultar verificando  se conta ja existe
=   public inserir(conta: Conta): void {
    try {
      // Verificar se a conta já existe na lista
      this.consultar(conta.numero);
      console.log(`Conta ${conta.numero} já cadastrada`);
    } catch (error) {
      if (error instanceof ContaInexistenteError) {
        // A conta não existe, pode ser adicionada
        this.contas.push(conta);
        console.log(`Conta ${conta.numero} cadastrada`);
      } else {
        // Outro erro inesperado
        throw error;
      }
    }
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
questão 14 - Tratamento de exeções no menu do App 
do {
  try {
    console.log('\nBem-vindo\nDigite uma opção:');
    console.log('1 - Cadastrar 2 - Consultar 3 - Sacar\n' +
      '4 - Depositar 5 - Excluir 6 - Transferir\n' +
      '7 – Totalizações' +
      '0 - Sair\n');
    opcao = promptSync("Opção:");

    switch (opcao) {
      case "1":
        inserir();
        break;
      case "2":
        consultar();
        break;
      case "3":
        sacar();
        break;
      case "4":
        depositar();
        break;
      case "5":
        excluir();
        break;
      case "6":
        transferir();
        break;
      case "7":
        totalizacoes();
        break;
      case "0":
        console.log("Aplicação encerrada");
        b.salvarEmArquivo();
        break;
      default:
        console.log("Opção inválida");
    }
  } catch (e: any) {
    if (e instanceof AplicacaoError) {
      console.log(e.message);
    } else if (e instanceof SaldoInsuficienteError) {
      console.log("Saldo insuficiente para realizar operação.");
    } else if (e instanceof ValorInvalidoError) {
      console.log("Valor inválido. Digite um valor numérico positivo.");
    } else if (e instanceof PoupancaInvalidaError) {
      console.log("Operação de render juros só pode ser realizada em contas poupança.");
    } else if (e instanceof ContaJaExistenteError) {
      console.log(e.message);
    } else {
      console.error("Erro não esperado:", e.message);
    }
  } finally {
    console.log("Operação finalizada. Digite <enter> para continuar.");
  }
} while (opcao != "0");
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

questão - 15 = Criar exeções no INPUT do APP.TS
= function inserir() {
    console.log("\nCadastrar conta\n");
    var numero;
    while (true) {
        numero = promptSync('Digite o número da conta:');
        if (numero && /^\d+$/.test(numero)) {
            break;
        }
        console.log("Insira apenas números. Tente novamente.");
    }
    var tipo;
    while (true) {
        tipo = promptSync('Digite o tipo da conta (C - Conta normal, CP - Poupança, CI - Conta imposto):');
        if (tipo) {
            break;
        }
        console.log("Valor inválido. Tente novamente.");
    }
    var conta;
    if (tipo == 'C') {
        conta = new Banco_1.Conta(numero, 0);
    }
    else if (tipo == 'CP') {
        var taxaDeJuros = void 0;
        while (true) {
            taxaDeJuros = parseFloat(promptSync('Digite a taxa de juros:'));
            if (!isNaN(taxaDeJuros) && taxaDeJuros > 0) {
                break;
            }
            console.log("Valor inválido. Tente novamente.");
        }
        conta = new Banco_1.Poupanca(numero, 0, taxaDeJuros);
    }
    else if (tipo == 'CI') {
        var taxaDesconto = void 0;
        while (true) {
            taxaDesconto = parseFloat(promptSync('Digite a taxa de desconto:'));
            if (!isNaN(taxaDesconto) && taxaDesconto > 0) {
                break;
            }
            console.log("Valor inválido. Tente novamente.");
        }
        conta = new Banco_1.ContaImposto(numero, 0, taxaDesconto);
    }
    else {
        throw new Error_1.ValorInvalidoError;
    }
    b.inserir(conta);
    console.log("Conta ".concat(conta.numero, " cadastrada"));
}
// Restante do código...
function consultar() {
    console.log("\nConsultar conta\n");
    var numero = promptSync('Digite o número da conta:');
    if (!numero) {
        throw new Error_1.ValorInvalidoError;
    }
    try {
        var conta = b.consultar(numero);
        console.log("Conta ".concat(conta.numero, " encontrada"));
        console.log("Saldo: R$ ".concat(conta.saldo.toFixed(2)));
        if (conta instanceof Banco_1.Poupanca) {
            console.log("Taxa de juros: ".concat(conta.taxaDeJuros, "%"));
        }
        else if (conta instanceof Banco_1.ContaImposto) {
            console.log("Taxa de desconto: ".concat(conta.taxaDesconto, "%"));
        }
    }
    catch (error) {
        console.log(error.message);
    }
}
function sacar() {
    console.log("\nSacar da conta\n");
    var numero = promptSync('Digite o número da conta:');
    var valor = parseFloat(promptSync('Digite o valor a ser sacado:'));
    if (!numero || isNaN(valor) || valor <= 0) {
        throw new Error_1.ValorInvalidoError;
    }
    try {
        b.sacar(numero, valor);
        console.log("Saque de R$ ".concat(valor.toFixed(2), " realizado da conta ").concat(numero));
    }
    catch (error) {
        console.error(error.message);
    }
}
function depositar() {
    console.log("\nDepositar na conta\n");
    var numero = promptSync('Digite o número da conta:');
    var valor = parseFloat(promptSync('Digite o valor a ser depositado:'));
    if (!numero || isNaN(valor) || valor <= 0) {
        throw new Error_1.ValorInvalidoError;
    }
    try {
        b.depositar(numero, valor);
        console.log("Dep\u00F3sito de R$ ".concat(valor.toFixed(2), " realizado na conta ").concat(numero));
    }
    catch (error) {
        console.error(error.message);
    }
}
function excluir() {
    console.log("\nExcluir conta\n");
    var numero = promptSync('Digite o número da conta:');
    if (!numero) {
        throw new Error_1.ValorInvalidoError;
    }
    try {
        b.excluir(numero);
        console.log("Conta ".concat(numero, " exclu\u00EDda"));
    }
    catch (error) {
        console.error(error.message);
    }
}
function transferir() {
    console.log("\nTransferir entre contas\n");
    var numeroDebito = promptSync('Digite o número da conta de débito:');
    var numeroCredito = promptSync('Digite o número da conta de crédito:');
    var valor = parseFloat(promptSync('Digite o valor a ser transferido:'));
    if (!numeroDebito || !numeroCredito || isNaN(valor) || valor <= 0) {
        throw new Error_1.ValorInvalidoError;
    }
    try {
        b.transferir(numeroCredito, numeroDebito, valor);
        console.log("Transfer\u00EAncia de R$ ".concat(valor.toFixed(2), " realizada da conta ").concat(numeroDebito, " para a conta ").concat(numeroCredito));
    }
    catch (error) {
        console.error(error.message);
    }
}
function totalizacoes() {
    console.log("\nTotalizações do banco\n");
    console.log("Total depositado: R$ ".concat(b.getTotalDepositado().toFixed(2)));
    console.log("N\u00FAmero de contas: ".concat(b.getTotalContas()));
    console.log("M\u00E9dia depositada: R$ ".concat(b.getMediaDepositada().toFixed(2)));
    console.log("Operação finalizada. Digite <enter> para continuar.");
}
